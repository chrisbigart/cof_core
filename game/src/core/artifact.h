#pragma once

#include "core/utils.h"

enum artifact_e : uint16_t {
	ARTIFACT_NONE = 0,
	ARTIFACT_CENTURION_WAISTBAND,
	ARTIFACT_CLOTH_JERKIN,
	ARTIFACT_FOUR_LEAF_GEMSTONE,
	//ARTIFACT_HO_CHI_MINHS_GAGE,
	ARTIFACT_HOLY_WATER,
	ARTIFACT_IVORYSTEEL_BRACERS,
	ARTIFACT_KNIGHTS_GIRDLE,
	ARTIFACT_LONGSWORD,
	ARTIFACT_PLANK_SHIELD,
	ARTIFACT_RED_LEATHER_BELT,
	ARTIFACT_MONOCULAR,
	ARTIFACT_VOODOO_DOLL,
	ARTIFACT_WITCHFIRE_CAULDRON,
	ARTIFACT_CRYSTAL_BALL,
	ARTIFACT_CUIRASS_OF_THE_ARCHMAGE,
	ARTIFACT_DIADEM_OF_THE_ARCHMAGE,
	ARTIFACT_DIAMOND_NECKLACE_OF_RENEWED_HOPE,
	//ARTIFACT_EATER_OF_SOULS,
	ARTIFACT_INFINITY_BAND,
	ARTIFACT_JORDANS_STONE,
	ARTIFACT_MERLINS_WIZARD_HAT,
	ARTIFACT_RISE_OF_THE_PHOENIX,
	ARTIFACT_SCALES_OF_THE_RED_DRAGON,
	ARTIFACT_SWORD_OF_ANUBIS,
	ARTIFACT_THE_ONE_RING,
	ARTIFACT_TURTLE_SHELL,
	ARTIFACT_WAND_OF_INFINITE_POWER,
	ARTIFACT_BRIMSTONE_BASTARD_SWORD,
	ARTIFACT_CONSTRICTING_RING,
	ARTIFACT_LEGENDARY_CROWN,
	ARTIFACT_AMULET_OF_LOGAN,
	ARTIFACT_ARCANE_CLOAK,
	ARTIFACT_BARBED_BARRIER,
	ARTIFACT_BLOODSTONE_BARRIER,
	ARTIFACT_BOOTS_OF_THE_NOMAD,
	ARTIFACT_FIFTYS_LUCKY_COIN,
	ARTIFACT_GOBLIN_ENGINEERS_TOOLKIT,
	ARTIFACT_GOLDEN_AEGIS,
	ARTIFACT_GOLDMAIL,
	ARTIFACT_HORNS_OF_THE_ANTLELOPE,
	ARTIFACT_HOURGLASS_OF_SHIFTING_SANDS,
	ARTIFACT_MAGELLANS_COMPASS,
	ARTIFACT_ORB_OF_EVERFLAME,
	ARTIFACT_SANDALS_OF_SERENITY,
	ARTIFACT_SHIELD_OF_THE_SEVEN_SEAS,
	//ARTIFACT_SORCERERS_SILK_GLOVES,
	ARTIFACT_STEELWEAVE_CHAINMAIL,
	ARTIFACT_CAPTAINS_GUARD,
	//ARTIFACT_CORD_OF_THE_SERPENTLORD,
	ARTIFACT_DAGGER_OF_THE_POISONMANCER,
	ARTIFACT_DAVIDS_SLING,
	ARTIFACT_FOREST_LORDS_SASH,
	ARTIFACT_GIRDLE_OF_ZEUS,
	//ARTIFACT_HAND_OF_MIDAS,
	ARTIFACT_HOLY_CHALICE,
	ARTIFACT_LIONHEART_PENDANT,
	ARTIFACT_OCEAN_STONE,
	ARTIFACT_OGRE_GAUNTLETS,
	ARTIFACT_RUBY_RING,
	ARTIFACT_RUNED_AXE,
	ARTIFACT_SKULLGUARD,
	ARTIFACT_SWAMPWADERS,
	ARTIFACT_THE_TASKMASTERS_RED_RIGHT_HAND,
	ARTIFACT_WAISTGUARD_OF_THE_DAMNED,
	ARTIFACT_WEDDING_BAND,
	ARTIFACT_WOODLAND_SHIELD,
	//ARTIFACT_UNDERTAKERS_CHOKER,
	//ARTIFACT_WILDHIDE_VEST,
	//ARTIFACT_WOODLAND_LEATHERS,
	ARTIFACT_BAND_OF_THE_TYRANT,
	
	ARTIFACT_CUSTOM = 0x1000,
	ARTIFACT_CUSTOM_1,
	ARTIFACT_CUSTOM_2,
	ARTIFACT_CUSTOM_3,
	ARTIFACT_CUSTOM_4,
	ARTIFACT_CUSTOM_5,
	ARTIFACT_CUSTOM_6,
	ARTIFACT_CUSTOM_7,
	ARTIFACT_CUSTOM_8,
	ARTIFACT_CUSTOM_9,

	ARTIFACT_SPELL_SCROLL = 0x8000
};

enum artifact_slot_e : uint8_t {
	SLOT_UNKNOWN,
	SLOT_HELM,
	SLOT_NECKLACE,
	SLOT_SHOULDERS,
	SLOT_WEAPON,
	SLOT_SHIELD,
	SLOT_GLOVES,
	SLOT_RING,
	SLOT_RING_2, //need this to maintain a mapping to paperdoll slots
	SLOT_ARMOUR,
	SLOT_BELT,
	//SLOT_CLOAK,
	SLOT_BOOTS,
	SLOT_TRINKET//1,
//	SLOT_MISC2,
//	SLOT_MISC3,
//	SLOT_MISC4,
	//SLOT_MISC5,
	//SLOT_MISC6,
	//SLOT_BACKPACK
};

enum artifact_rarity_e : uint8_t {
	RARITY_UNKNOWN,
	RARITY_COMMON,
	RARITY_UNCOMMON,
	RARITY_RARE,
	RARITY_EXCEPTIONAL,
	RARITY_LEGENDARY
};

enum artifact_effect_e : uint8_t {
	EFFECT_NONE,
	EFFECT_ATTACK_BONUS,
	EFFECT_DEFENSE_BONUS,
	EFFECT_POWER_BONUS,
	EFFECT_KNOWLEDGE_BONUS,
	EFFECT_MORALE_BONUS,
	EFFECT_LUCK_BONUS,
	EFFECT_ENEMY_MORALE_BONUS,
	EFFECT_ENEMY_LUCK_BONUS,
	EFFECT_LAND_MOVEMENT_BONUS,
	EFFECT_SEA_MOVEMENT_BONUS,
	EFFECT_SPEED_BONUS,
	EFFECT_INITIATIVE_BONUS,
	EFFECT_RESOURCE_GENERATION,
	EFFECT_SKILL_BOOST,
	EFFECT_SPELL_HASTE_BOOST,
	EFFECT_INCREASED_DAMAGE_AGAINST_UNDEAD,
	EFFECT_CRYSTAL_BALL_REVEAL,
	EFFECT_SPELL_CAST_ON_BATTLE_START,
	EFFECT_DRAGON_BREATH_IMMUNITY,
	EFFECT_PHOENIX_REINCARNATION,
	EFFECT_SLAIN_ENEMIES_REST_IN_PEACE,
	EFFECT_HEADHUNTER_BUFF_STEAL,
	EFFECT_ADVENTURE_MAP_INVISIBILITY,
	EFFECT_INCREASED_SUMMONING_EFFECTIVENESS,
	EFFECT_INCREASED_SPELL_EFFECTIVENESS,
	EFFECT_INCREASED_SPELL_DAMAGE,
	EFFECT_INCREASED_UNIT_HEALTH,
	EFFECT_MANA_RECOVERY_ON_SPELLCAST,
	EFFECT_MANA_RECOVERY_PER_DAY,
	EFFECT_ADDITIONAL_BALLISTA_SHOT,
	EFFECT_ADDITIONAL_CATAPULT_SHOT,
	EFFECT_GOBLIN_TOOLKIT_TELEPORT,
	EFFECT_REDUCED_RANGED_DAMAGE_TAKEN,
	EFFECT_REDUCED_SHIP_BOARDING_PENALTY
};

#include "spell.h"
#include "core/hero.h"

enum frequency_e : uint8_t;

struct artifact_effect_t {
	artifact_effect_e type = EFFECT_NONE;
	int8_t magnitude_1 = 0;
	int8_t magnitude_2 = 0;
	union {
		skill_e skill;
		spell_e spell;
		spell_school_e spell_school;
		resource_e resource;
		spell_target_e spell_target;
		frequency_e frequency;
	} property1, property2;
};

enum artifact_inventory_sound_e : uint8_t {
	ARTIFACT_INVENTORY_SOUND_NONE,
	ARTIFACT_INVENTORY_SOUND_CLOTH1
};

struct artifact_t {
	uint16_t asset_id = 0;
	artifact_e id = ARTIFACT_NONE;
	artifact_slot_e slot = SLOT_UNKNOWN;
	artifact_rarity_e rarity = RARITY_UNKNOWN;
	artifact_inventory_sound_e inventory_sound = ARTIFACT_INVENTORY_SOUND_NONE;
	std::string name;
	std::string description;
	std::string flavor;
	std::string pickup_story;
	std::vector<artifact_effect_t> effects;

	static bool is_custom_artifact(artifact_e artifact_id);
	static bool is_spell_scroll(artifact_e artifact_id);
	static spell_e get_spell_scroll_spell_id(artifact_e artifact_id);
	static artifact_e get_artifact_id_for_spell_scroll(spell_e spell_id);
	
	static std::string get_slot_name(artifact_slot_e slot);
	bool is_empty() const;
	bool does_slot_match(artifact_slot_e artifact_slot) const;
	int8_t get_attack_bonus() const;
	int8_t get_defense_bonus() const;
	int8_t get_power_bonus() const;
	int8_t get_knowledge_bonus() const;
	int8_t get_luck_bonus() const;
	int8_t get_morale_bonus() const;
};
