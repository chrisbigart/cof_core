#pragma once

#include "core/utils.h"
#include "core/game_config.h"

#include <vector>

enum unit_type_e : uint8_t {
	UNIT_UNKNOWN = 0,
	UNIT_SKELETON,
	UNIT_GHOUL,
	UNIT_VAMPIRE,
	UNIT_LICH,
	UNIT_ABOMINATION,
	UNIT_BONE_WYRM,
	UNIT_GOBLIN,
	UNIT_ORC,
	UNIT_WOLF,
	UNIT_TROLL,
	UNIT_YETI,
	UNIT_BEHEMOTH,
	UNIT_INFANTRYMAN,
	UNIT_ARCHER,
	UNIT_FOOTMAN,
	UNIT_BISHOP,
	UNIT_CAVALIER,
	UNIT_CRUSADER,
	UNIT_DEMON,
	UNIT_SUCCUBUS,
	UNIT_HIPPOGRIFF,
	UNIT_MINOTAUR,
	UNIT_MANTICORE,
	UNIT_RED_DRAGON,
	UNIT_PIXIE,
	UNIT_DRYAD,
	UNIT_ELF,
	UNIT_DRUID,
	UNIT_UNICORN,
	UNIT_PHOENIX,
	UNIT_GOLEM,
	UNIT_DWARF,
	UNIT_ARCANE_CONSTRUCT,
	UNIT_GENIE,
	UNIT_MAGE,
	UNIT_TITAN,
	//excluded from certain map objects
	UNIT_GHOST,
	//'special' units
	UNIT_TURRET_MAIN = 100,
	UNIT_TURRET_LEFT,
	UNIT_TURRET_RIGHT,
	UNIT_CATAPULT,
	UNIT_BALLISTA,
	UNIT_CUSTOM
};

enum buff_e : uint8_t {
	BUFF_NONE = 0,
	BUFF_FLYER,
	BUFF_SHOOTER,
	BUFF_SHOOTS_ARROWS,
	BUFF_UNDEAD,
	BUFF_ANIMATED,
	BUFF_SUMMONED,
	BUFF_NO_MELEE_PENALTY,
	BUFF_SHOOTS_TWICE,
	BUFF_UNLIMITED_SHOTS,
	BUFF_NO_ENEMY_RETALIATION,
	BUFF_MULTIPLE_RETAILIATIONS,
	BUFF_UNLIMITED_RETALIATIONS,
	BUFF_ATTACK_ALL_ADJACENT_UNITS,
	BUFF_THREE_HEADED_ATTACK,
	BUFF_DOUBLE_ATTACK,
	BUFF_LICH_DEATH_CLOUD_ATTACK,
	BUFF_MAGOG_FIREBALL_ATTACK,
	BUFF_STRIKE_AND_RETURN,
	BUFF_REDUCED_DAMAGE_FROM_ARROWS,
	BUFF_VAMPIRE_LIFESTEAL,
	BUFF_GHOST_SOULSTEAL,
	BUFF_RANGED_CAN_SHOOT_ADJACENT,
	BUFF_NO_RANGE_PENALTY,
	BUFF_DOUBLE_DAMAGE,
	BUFF_DRAGON_BREATH_ATTACK,
	BUFF_TROLL_REGENERATION,
	BUFF_BEHEMOTH_CLAWS,
	BUFF_NIX_SHIELD,
	BUFF_LUCK_AURA,
	BUFF_UNICORN_RESISTANCE,
	BUFF_DRAGON_MAGIC_DAMPER,
	BUFF_MAGIC_RESISTANCE,
	BUFF_MAGIC_IMMUNITY,
	BUFF_MAGIC_REFLECTION,
	BUFF_MAGIC_ABSORPTION,
	BUFF_BLIND_ON_ATTACK,
	BUFF_PARALYZE_ON_ATTACK,
	BUFF_SEDUCE_ON_ATTACK,
	BUFF_CURSE_ON_ATTACK,
	BUFF_POISON_ON_ATTACK,
	BUFF_LIGHTNING_ON_ATTACK,
	BUFF_FIRE_IMMUNITY,
	BUFF_FROST_IMMUNITY,
	BUFF_LIGHTNING_IMMUNITY,
	BUFF_EARTH_IMMUNITY,
	BUFF_CHAOS_IMMUNITY,
	BUFF_DEATH_IMMUNITY,
	BUFF_LIFE_IMMUNITY,
	BUFF_HOLY_IMMUNITY,
	BUFF_ARCANE_IMMUNITY,
	BUFF_DESTRUCTION_IMMUNITY,
	BUFF_REDUCED_DAMAGE_FROM_RETALIATIONS,
	BUFF_POSITIVE_MORALE,
	BUFF_EXTRA_DAMAGE_ON_FIRST_ATTACK,
	BUFF_JOUSTING_BONUS,
	BUFF_SPELLCASTER,
	BUFF_TELEPORTATION,
	BUFF_MIND_SPELL_IMMUNITY,
	BUFF_EXTRA_DAMAGE_TO_UNDEAD,
	BUFF_BLESSED,
	BUFF_REDUCED_DAMAGE_FROM_RANGED,
	BUFF_REDUCED_DAMAGE_FROM_MELEE,
	BUFF_CURSED,
	BUFF_INCREASED_LUCK,
	BUFF_INCREASED_MORALE,
	BUFF_INCREASED_DAMAGE,
	BUFF_INCREASED_SPEED,
	BUFF_INCREASED_INITIATIVE,
	BUFF_INCREASED_HEALTH,
	BUFF_INCREASED_DEFENSE,
	BUFF_INCREASED_ATTACK,
	BUFF_REINCARNATION,
	BUFF_ROOTED,
	BUFF_BLINDED,
	BUFF_PARALYZED,
	BUFF_PACIFIED,
	BUFF_FROZEN,
	BUFF_THAWED,
	BUFF_SLOWED,
	BUFF_HASTENED,
	BUFF_CRUSADE_DEBUFF_STACK,
	BUFF_ON_GUARD,
	BUFF_SEDUCED,
	BUFF_ELECTROCUTED,
	BUFF_CAUTERIZED,
	BUFF_BURNING,
	BUFF_STUNNED,
	BUFF_FEARED,
	BUFF_BERSERK,
	BUFF_FIRE_SHIELD,
	BUFF_THORNS,
	BUFF_ANGELS_WINGS,
	BUFF_MANA_SHIELD,
	BUFF_CRIPPLED,
	BUFF_SPINS_WEBS,
	BUFF_FIRST_STRIKE,
	BUFF_DIVINE_INSPIRATION,
	BUFF_OVERWHELMED,
	BUFF_FEROCITY,
	BUFF_BONECHILLED,
	BUFF_INFESTED,
	BUFF_POISONED,
	BUFF_CHILLED,
	BUFF_SWIFT_STRIKE,
	BUFF_WING_CLIPPED,
	BUFF_TIME_WARP, //code-only (de)buff for time dilation
	BUFF_CATS_SWIFTNESS
};

enum buff_type_e : uint8_t {
	BUFF_TYPE_UNKNOWN,
	BUFF_TYPE_INHERENT,
	BUFF_TYPE_POSITIVE,
	BUFF_TYPE_NEGATIVE
};

#include "resource.h"

struct creature_t {
	creature_t() {
		for(uint i = 0; i < game_config::MAX_INHERENT_BUFFS; i++)
			inherent_buffs[i] = BUFF_NONE;
	}
	unit_type_e unit_type = UNIT_UNKNOWN;
	std::string name;
	std::string name_plural;
	hero_class_e faction;
	uint8_t tier = 0;
	uint16_t asset_id_portrait = 0;
	unit_type_e reanimates_as_unit_type = UNIT_UNKNOWN;
	uint health = 0;
	uint initiative = 0;
	uint speed = 0;
	uint min_damage = 0;
	uint max_damage = 0;
	uint attack = 0;
	uint defense = 0;
	bool two_hex = false;
	resource_group_t cost;
	buff_e inherent_buffs[game_config::MAX_INHERENT_BUFFS];

	bool has_inherent_buff(const buff_e& buff) const {
		for(auto b : inherent_buffs) {
			if(b == buff)
				return true;
		}
		
		return false;
	}
};
