#pragma once

#include "core/game_config.h"

#include <string>
#include <cmath>

enum magic_damage_e {
	MAGIC_DAMAGE_NONE,
	MAGIC_DAMAGE_ALL,
	MAGIC_DAMAGE_FIRE,
	MAGIC_DAMAGE_FROST,
	MAGIC_DAMAGE_LIGHTNING,
	MAGIC_DAMAGE_EARTH,
	MAGIC_DAMAGE_CHAOS,
	MAGIC_DAMAGE_HOLY,
	MAGIC_DAMAGE_HEALING = 0x1000
};

enum spell_school_e {
    SCHOOL_NONE,
    SCHOOL_ARCANE,
    SCHOOL_NATURE,
    SCHOOL_HOLY,
    SCHOOL_DESTRUCTION,
    SCHOOL_DEATH,
    SCHOOL_WARCRY,
    SCHOOL_ALL
};

enum spell_type_e : uint8_t {
	SPELL_TYPE_ALL,
	SPELL_TYPE_ADVENTURE,
	SPELL_TYPE_COMBAT
};

enum spell_target_e : uint8_t {
	TARGET_NONE,
	TARGET_SINGLE_ALLY,
	TARGET_ALL_ALLIED,
	TARGET_SINGLE_ENEMY,
	TARGET_ALL_ENEMY,
	TARGET_ALL_UNITS,
	TARGET_SINGLE_HEX,
	TARGET_HEX_RADIUS_1,
	TARGET_HEX_RADIUS_2,
	TARGET_HEX_RADIUS_3,
	TARGET_HEX_RADIUS_1_EXCLUDE_CENTER,
	TARGET_2_HEX_UP_DOWN,
	TARGET_2_HEX_LEFT_RIGHT,
	TARGET_3_HEX_UP_DOWN,
	TARGET_3_HEX_LEFT_RIGHT,
	TARGET_SUMMON,
	TARGET_ADVENTURE_LOCATION
};

enum spell_e : uint16_t {
	SPELL_UNKNOWN,
	SPELL_CURE,
	SPELL_SWIFTNESS,
	SPELL_LUNAR_ARROW,
	SPELL_LIGHTNING_BOLT,
	SPELL_FROST_RAY,
	SPELL_ENTANGLING_ROOTS,
	SPELL_REJUVENATION,
	SPELL_BARKSKIN,
	SPELL_CATS_REFLEXES,
	SPELL_NATURES_FORTUNE,
	SPELL_ICE_LANCE,
	SPELL_PACIFY,
	SPELL_MASS_CURE,
	SPELL_MASS_REJUVENATION,
	SPELL_MASS_BARKSKIN,
	SPELL_CHAIN_LIGHTNING,
	SPELL_ARCANE_BOLT,
	SPELL_STONESKIN,
	SPELL_HASTE,
	SPELL_STEELSKIN,
	SPELL_SLOW,
	SPELL_ELECTROCUTE,
	SPELL_MANA_SHIELD,
	SPELL_DIAMOND_SKIN,
	SPELL_MASS_STONESKIN,
	SPELL_MASS_HASTE,
	SPELL_NOVA,
	SPELL_PARALYZE,
	SPELL_ARCANE_MISSILES,
	SPELL_AIR_SHIELD,
	SPELL_MASS_AIR_SHIELD,
	SPELL_ARCANE_REANIMATION,
	SPELL_MASS_STEELSKIN,
	SPELL_MASS_SLOW,
	SPELL_MASS_DIAMOND_SKIN,
	SPELL_MIRROR_IMAGE,
	SPELL_IMPLOSION,
	SPELL_TIME_DILATION,
	SPELL_BLESS,
	SPELL_FORTITUDE,
	SPELL_THORNS,
	SPELL_SHIELD,
	SPELL_MASS_SHIELD,
	SPELL_MIRTH,
	SPELL_BLIND,
	SPELL_MASS_THORNS,
	SPELL_HOLY_LIGHT,
	SPELL_HOLY_SHOUT,
	SPELL_MASS_FORTITUDE,
	SPELL_MASS_BLESS,
	SPELL_DIVINE_INSPIRATION,
	SPELL_RESURRECTION,
	SPELL_CURSE,
	SPELL_SHADOW_BOLT,
	SPELL_FIRE_BALL,
	SPELL_CRIPPLE,
	SPELL_METEOR_SHOWER,
	SPELL_FIRE_BLAST,
	SPELL_SORROW,
	SPELL_MISFORTUNE,
	SPELL_MASS_CURSE,
	SPELL_FIRE_SHIELD,
	SPELL_FEAR,
	SPELL_MASS_CRIPPLE,
	SPELL_INFERNO,
	SPELL_APOCALYPSE,
	SPELL_DAMNATION,
	SPELL_BERSERK,
	SPELL_SACRIFICE,
	SPELL_ARMAGEDDON,
	SPELL_DECAY,
	SPELL_REANIMATE_DEAD,
	SPELL_DEATH_COIL,
	SPELL_INFEST,
	SPELL_VAMPIRISM,
	SPELL_REAPERS_SCYTHE,
	SPELL_BLOODLUST,
	SPELL_FRENZY,
	SPELL_SLAYER,
	SPELL_CULL_THE_WEAK,
	SPELL_PRIMAL_SCREAM,
	SPELL_RAGE,
	SPELL_WORMHOLE,
	SPELL_MANA_BATTERY,
	SPELL_RITUAL,
	SPELL_RECALL,
	SPELL_CONJURE_SHIP,
	SPELL_MIGHT

	//SPELL_SPROUT,
	//SPELL_SUMMON_TREANTS,
	//SPELL_HYDRA,
	//SPELL_ANGELS_WINGS,
	//SPELL_SUMMON_ANGEL,
	//SPELL_SUMMON_INFERNAL,
};

struct spell_multiplier_t {
	uint16_t fixed = 0;
	//todo: fold these into bitfields
	uint8_t is_power_multiplied = 0;
	uint8_t is_damage = 0;
	uint8_t multi = 0;

	inline int get_value(int power, float effectiveness = 1.0f) const {
		return (int)std::round((fixed + (is_power_multiplied ? power : 1.f) * multi) * effectiveness);
	}

};

struct spell_t {
	uint16_t asset_id;
	spell_e id;
	spell_school_e school;
	magic_damage_e damage_type;
	spell_type_e spell_type;
	spell_target_e target;
	uint8_t mana_cost;
	uint8_t level;
	spell_multiplier_t multiplier[3];

	static std::string get_school_name(spell_school_e school);

	magic_damage_e get_damage_component_type() const {
		return (magic_damage_e)((int)damage_type & (~(int)MAGIC_DAMAGE_HEALING));
	}

	bool is_healing_spell() const {
		return ((int)damage_type & ((int)MAGIC_DAMAGE_HEALING));
	}

	std::string name;
	std::string description;
	//mage guild probability
	
};
